# Load this configuration file via -c option

base:
  # Collector id for this collector - Use "hostname" to use the system hostname
  #    Can be any string value up to 64 bytes
  collector_id: hostname

  # BMP server listening port
  listen_port: 5000

  # IPv4/IPv6 mode setting
  #    Can be "v4" "v6" or "v4v6"
  listen_mode: v4

  # Listening IP address
  #    Default is to listen/bind to the ANY IP address.  Configure one or both of the below
  #    to define the listening address.
  listen_ipv4: "0.0.0.0"
  #listen_ipv6: "::"

  # Size in MBytes
  # Each router is allocated this buffer size.  This is a blocking circular buffer,
  #    which eliminates any read/processing delay by the collector.
  #    A size of 8MB is sufficient for a few peers.   Use 64 if the router
  #    is a route reflector or large transit peering router.
  bmp_ring_buffer_size: 15

  # CPU utilization cap of the program
  #   If the CPU utilization is beyond this threshold,
  #   the collector will not accept new BMP connections.
  max_cpu_utilization: 80


debug:
  general: false       # General debugging
  bmp:     false       # BMP related
  msgbus:  false       # Kafka/message bus


kafka:

  # message.max.bytes - Maximum transmit message size
  message.max.bytes: 1000000

  # receive.message.max.bytes - Maximum receive message size
  # The value should be at least
  # fetch.message.max.bytes * number of partitions consumed from i
  # + messaging overhead (e.g. 200000 bytes).
  receive.message.max.bytes: 200000000

  # Client group session and failure detection timeout in milliseconds
  session.timeout.ms: 10000

  # Timeout for network requests
  socket.timeout.ms: 30000

  # Maximum number of messages allowed on the producer queue.
  queue.buffering.max.messages: 100000

  # Maximum number of kbytes allowed on the producer queue. Range 1 - 2097151
  queue.buffering.max.kbytes: 1048576

  # Maximum time, in milliseconds, for buffering data on the producer queue.
  queue.buffering.max.ms: 100

  # How many times to retry sending a failing MessageSet.
  # Note: retrying may cause reordering.
  message.send.max.retries: 2

  # The backoff time in milliseconds before retrying a message send.
  retry.backoff.ms: 100

  # Compression codec to use for compressing message sets: none, gzip or snappy
  # By default it is set to snappy
  compression.codec: snappy

  # Broker list.
  #    For IPv6 use "[host or ip]:port".  Make sure to use double quotes for IPv6
  #    Can specify the protocol using <proto>://<host>[:port]
  brokers:
    - localhost:9092

  # Topics are the topic names used by the collector when producing messages.
  #   You can customize each topic, including using variable substitution.
  topics:

    variables:
      root:   "openbmp"   # Defines the root topic (e.g. openbmp.*)

    #  Define the topic names
    names:
      # collector messages are not by router or group, so those group mappings should not be used
      collector:      "{root}.{parsed}.collector"

      # router messages are not by peer or group, so peer group mapping should not be used
      router:         "{root}.{parsed}.router"

      # The below support group mappings router_group and peer_group, and peer_asn
      bmp_raw:        "{root}.bmp_raw"


mapping:
  groups:
    # Order of matching
    #    Matching order is performed in the following sequence. The first match found is used.
    #
    #    regexp_hostname - Hostname/regular expression is used first
    #    prefix_range    - Prefix range is used second
    #    asn             - Peer asn list

    # {router_group} is the variable that you use for topic substitution
    router_group:
      # name defines the value that is substituted for the variable.  This provides a consistent
      #    mapping for different IP's and hostnames
      - name: "phil-cran"

        # You can define a list of regexp's that match for hostname to group mapping
        regexp_hostname:
          - .*\.phil\..*

        # You can also define a list of prefixes that match for ip to group mapping
        prefix_range:
          - 10.100.100.0/24
          - 10.100.104.0/24
          - "2001:420:305c:100::/64"

    peer_group:
      # name defines the value that is substituted for the variable.  This provides a consistent
      #    mapping for different IP's and hostnames
      - name: "lab"

        # You can define a list of regexp's that match for hostname to group mapping
        regexp_hostname:
          - .*\.lab\..*

        # You can also define a list of prefixes that match for ip to group mapping
        prefix_range:
          - 10.100.100.0/24
          - 10.100.104.0/24

        # You can define the matching to look at the peer asn.  This is only available for peer_groups.
        asn:
          - 100
          - 65000
          - 65001