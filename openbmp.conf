# Load this configuration file via -c option

debug:
  all: true           # enable all debug messages
  collector: false    # OpenBMP main thread debugging
  worker: false       # Worker thread debugging
  encapsulator: false # Encapsulator debugging
  message_bus: false  # Kafka message bus debugging

base:
  # Collector name for this collector - Use "hostname" to use the system hostname
  #     Can be any string value up to 64 bytes
  collector_name: hostname
  # What is the group name of this collector
  collector_group: caida

  # BMP server listening port
  listen_port: 5000

  # IPv4/IPv6 mode setting
  #     Can be "v4" "v6" or "v4v6"
  listen_mode: v4

  # Listening IP address
  #     Default is to listen/bind to the ANY IP address.  Configure one or both of the below
  #     to define the listening address.
  listen_ipv4: "0.0.0.0"
  #listen_ipv6: "::"

  # Size in MBytes
  # Each router is allocated this buffer size.  This is a blocking circular buffer,
  #     which eliminates any read/processing delay by the collector.
  #     A size of 8MB is sufficient for a few peers.   Use 64 if the router
  #     is a route reflector or large transit peering router.
  bmp_ring_buffer_size: 15

  # The max number of workers can be in rib dump waiting state
  #     bmp routers have a 30 sec prep window after the init msg is sent;
  #     the rib dump starts after the 30 sec window.
  #     this variable makes the CPU utilization measurement useful
  max_rib_waiting_workers: 10

  # CPU utilization cap of the program, in decimal
  #     If the CPU utilization is beyond this threshold,
  #     the collector will not accept new BMP connections.
  max_cpu_utilization: 0.8

  # Should the program run as a daemon
  daemon: true

  # Collector heartbeat signal interval, in seconds
  heartbeat_interval: 5

  # Header version that we want to use
  # Options: binary_v1, binary_v2
  header_version: "binary_v2"



kafka_topic_template:
  ######################################################################################
  # In OpenBMP V2, there are three kafka topics: collector, router, and bmp_raw.
  #   collector: we send collector heartbeat signals.
  #   router (???): I am not sure what to send here;
  #                       bmp_raw contains all the information
  #   bmp_raw: we forward raw bmp messages.
  ######################################################################################

  # Use the following {{}} variables to get_encap_msg more specific kafka topics
  #   so the consumers can choose to receive only the topics they are interested in:
  #
  #   The following two variables are defined in "base" of this config file
  #   {{collector_group}}:  organization-level information w.r.t. this openbmp collector
  #   {{collector_name}}:  the name of this openbmp collector
  #
  #   The following variables are generated at runtime
  #   router_group and peer_group are generated by the rules defined in "grouping" of this config file
  #   {{router_group}}:  organization-level information w.r.t. a bmp router.
  #                       constructed by the grouping criteria defined by you in this file.
  #   {{router_hostname}}: ip to hostname lookup, may not be resolvable.
  #   {{router_ip}}: bmp router ip
  #
  #   {{peer_group}}: organization-level information w.r.t. a bmp router's peer.
  #                       constructed by the grouping criteria defined by you in this file.
  #   {{peer_asn}}: from peer hdr
  #   {{peer_ip}}: from peer hdr
  #
  #   Note that if you use peer_* variables in your topic template,
  #     it increases the program CPU utilization;
  #     peer related information requires bmp peer header parsing for every msg.
  #
  # E.g., you can define your collector topic as:
  #   collector: "{{collector_group}}.{{collector_name}}.collector"

  # You can use {{collector_group}} and {{collector_name}}
  #   in templating the collector topic.
  collector: "{{collector_group}}.{{collector_name}}.collector"
  # You can use {{collector_group}}, {{collector_name}},
  #   and all router related {{}} variables in templating the router topic.
  router: "{{collector_group}}.{{router_group}}.router"
  # You can use all above {{}} variables for this topic.
  bmp_raw: "{{collector_group}}.{{router_group}}.{{peer_group}}.bmp_raw"


grouping:
  # router_group, order of matching
  #   matching order is performed in the following sequence. the first match found is used.
  #     regexp_hostname - hostname/regular expression is used first
  #     prefix_range    - prefix range is used second
  router_group:
    - name: "caida-bgpstream"
      prefix_range:
        - 192.133.197.1/32

    - name: "route-views.routeviews.org"
      regexp_hostname:
        - route-views\.routeviews\.org
      prefix_range:
        - 128.223.51.103/32

  # peer_group, order of matching
  #   matching order is performed in the following sequence. the first match found is used.
  #     regexp_hostname - hostname/regular expression is used first
  #     prefix_range    - prefix range is used second
  #     asn             - peer asn list
  peer_group:
    # name defines the value that is substituted for the variable.  This provides a consistent
    #    mapping for different IP's and hostnames
    - name: "lab"

      # You can define a list of regexp's that match for hostname to group mapping
      regexp_hostname:
        - .*\.lab\..*

      # You can also define a list of prefixes that match for ip to group mapping
      prefix_range:
        - 10.100.100.0/24
        - 10.100.104.0/24

      # You can define the matching to look at the peer asn.  This is only available for peer_groups.
      asn:
        - 100
        - 65000
        - 65001


librdkafka_config:

  ##################################################
  ### The following variables and values will be ###
  ###   directly passed to librdkafka            ###
  ### Consult with librdkafka documentation to   ###
  ###   configure your producer                  ###
  ##################################################

  # BROKER LIST
  #   For IPv6 use "[host or ip]:port".  Make sure to use double quotes for IPv6
  #   Can specify the protocol using <proto>://<host>[:port]
  #   Use comma to separate brokers (no space)
  #   e.g., metadata.broker.list: "localhost:9092,localhost:12345"
  metadata.broker.list: "localhost:9092"

  # message.max.bytes - Maximum transmit message size
  message.max.bytes: 1000000

  # receive.message.max.bytes - Maximum receive message size
  # The value should be at least
  # fetch.message.max.bytes * number of partitions consumed from i
  # + messaging overhead (e.g. 200000 bytes).
  receive.message.max.bytes: 200000000

  # Client group session and failure detection timeout in milliseconds
  session.timeout.ms: 10000

  # Timeout for network requests
  socket.timeout.ms: 30000

  # Maximum number of messages allowed on the producer queue.
  queue.buffering.max.messages: 100000

  # Maximum number of kbytes allowed on the producer queue. Range 1 - 2097151
  queue.buffering.max.kbytes: 1048576

  # Maximum time, in milliseconds, for buffering data on the producer queue.
  queue.buffering.max.ms: 100

  # How many times to retry sending a failing MessageSet.
  # Note: retrying may cause reordering.
  message.send.max.retries: 2

  # The backoff time in milliseconds before retrying a message send.
  retry.backoff.ms: 100

  # Compression codec to use for compressing message sets: none, gzip or snappy
  # By default it is set to snappy
  compression.codec: snappy

